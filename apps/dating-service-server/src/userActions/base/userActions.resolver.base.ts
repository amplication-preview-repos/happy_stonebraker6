/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserActions } from "./UserActions";
import { UserActionsCountArgs } from "./UserActionsCountArgs";
import { UserActionsFindManyArgs } from "./UserActionsFindManyArgs";
import { UserActionsFindUniqueArgs } from "./UserActionsFindUniqueArgs";
import { CreateUserActionsArgs } from "./CreateUserActionsArgs";
import { UpdateUserActionsArgs } from "./UpdateUserActionsArgs";
import { DeleteUserActionsArgs } from "./DeleteUserActionsArgs";
import { User } from "../../user/base/User";
import { UserActionsService } from "../userActions.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserActions)
export class UserActionsResolverBase {
  constructor(
    protected readonly service: UserActionsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserActions",
    action: "read",
    possession: "any",
  })
  async _userActionsItemsMeta(
    @graphql.Args() args: UserActionsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserActions])
  @nestAccessControl.UseRoles({
    resource: "UserActions",
    action: "read",
    possession: "any",
  })
  async userActionsItems(
    @graphql.Args() args: UserActionsFindManyArgs
  ): Promise<UserActions[]> {
    return this.service.userActionsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserActions, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserActions",
    action: "read",
    possession: "own",
  })
  async userActions(
    @graphql.Args() args: UserActionsFindUniqueArgs
  ): Promise<UserActions | null> {
    const result = await this.service.userActions(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserActions)
  @nestAccessControl.UseRoles({
    resource: "UserActions",
    action: "create",
    possession: "any",
  })
  async createUserActions(
    @graphql.Args() args: CreateUserActionsArgs
  ): Promise<UserActions> {
    return await this.service.createUserActions({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserActions)
  @nestAccessControl.UseRoles({
    resource: "UserActions",
    action: "update",
    possession: "any",
  })
  async updateUserActions(
    @graphql.Args() args: UpdateUserActionsArgs
  ): Promise<UserActions | null> {
    try {
      return await this.service.updateUserActions({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserActions)
  @nestAccessControl.UseRoles({
    resource: "UserActions",
    action: "delete",
    possession: "any",
  })
  async deleteUserActions(
    @graphql.Args() args: DeleteUserActionsArgs
  ): Promise<UserActions | null> {
    try {
      return await this.service.deleteUserActions(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: UserActions): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
