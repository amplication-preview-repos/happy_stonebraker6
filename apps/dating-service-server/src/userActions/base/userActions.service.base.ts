/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UserActions as PrismaUserActions,
  User as PrismaUser,
} from "@prisma/client";

export class UserActionsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserActionsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userActions.count(args);
  }

  async userActionsItems(
    args: Prisma.UserActionsFindManyArgs
  ): Promise<PrismaUserActions[]> {
    return this.prisma.userActions.findMany(args);
  }
  async userActions(
    args: Prisma.UserActionsFindUniqueArgs
  ): Promise<PrismaUserActions | null> {
    return this.prisma.userActions.findUnique(args);
  }
  async createUserActions(
    args: Prisma.UserActionsCreateArgs
  ): Promise<PrismaUserActions> {
    return this.prisma.userActions.create(args);
  }
  async updateUserActions(
    args: Prisma.UserActionsUpdateArgs
  ): Promise<PrismaUserActions> {
    return this.prisma.userActions.update(args);
  }
  async deleteUserActions(
    args: Prisma.UserActionsDeleteArgs
  ): Promise<PrismaUserActions> {
    return this.prisma.userActions.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.userActions
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
