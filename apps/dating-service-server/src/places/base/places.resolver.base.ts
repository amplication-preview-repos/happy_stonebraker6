/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Places } from "./Places";
import { PlacesCountArgs } from "./PlacesCountArgs";
import { PlacesFindManyArgs } from "./PlacesFindManyArgs";
import { PlacesFindUniqueArgs } from "./PlacesFindUniqueArgs";
import { CreatePlacesArgs } from "./CreatePlacesArgs";
import { UpdatePlacesArgs } from "./UpdatePlacesArgs";
import { DeletePlacesArgs } from "./DeletePlacesArgs";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { PlacesService } from "../places.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Places)
export class PlacesResolverBase {
  constructor(
    protected readonly service: PlacesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Places",
    action: "read",
    possession: "any",
  })
  async _placesItemsMeta(
    @graphql.Args() args: PlacesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Places])
  @nestAccessControl.UseRoles({
    resource: "Places",
    action: "read",
    possession: "any",
  })
  async placesItems(
    @graphql.Args() args: PlacesFindManyArgs
  ): Promise<Places[]> {
    return this.service.placesItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Places, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Places",
    action: "read",
    possession: "own",
  })
  async places(
    @graphql.Args() args: PlacesFindUniqueArgs
  ): Promise<Places | null> {
    const result = await this.service.places(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Places)
  @nestAccessControl.UseRoles({
    resource: "Places",
    action: "create",
    possession: "any",
  })
  async createPlaces(@graphql.Args() args: CreatePlacesArgs): Promise<Places> {
    return await this.service.createPlaces({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Places)
  @nestAccessControl.UseRoles({
    resource: "Places",
    action: "update",
    possession: "any",
  })
  async updatePlaces(
    @graphql.Args() args: UpdatePlacesArgs
  ): Promise<Places | null> {
    try {
      return await this.service.updatePlaces({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Places)
  @nestAccessControl.UseRoles({
    resource: "Places",
    action: "delete",
    possession: "any",
  })
  async deletePlaces(
    @graphql.Args() args: DeletePlacesArgs
  ): Promise<Places | null> {
    try {
      return await this.service.deletePlaces(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User], { name: "user" })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async findUser(
    @graphql.Parent() parent: Places,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUser(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
