/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Places as PrismaPlaces,
  User as PrismaUser,
} from "@prisma/client";

export class PlacesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PlacesCountArgs, "select">): Promise<number> {
    return this.prisma.places.count(args);
  }

  async placesItems(args: Prisma.PlacesFindManyArgs): Promise<PrismaPlaces[]> {
    return this.prisma.places.findMany(args);
  }
  async places(
    args: Prisma.PlacesFindUniqueArgs
  ): Promise<PrismaPlaces | null> {
    return this.prisma.places.findUnique(args);
  }
  async createPlaces(args: Prisma.PlacesCreateArgs): Promise<PrismaPlaces> {
    return this.prisma.places.create(args);
  }
  async updatePlaces(args: Prisma.PlacesUpdateArgs): Promise<PrismaPlaces> {
    return this.prisma.places.update(args);
  }
  async deletePlaces(args: Prisma.PlacesDeleteArgs): Promise<PrismaPlaces> {
    return this.prisma.places.delete(args);
  }

  async findUser(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<PrismaUser[]> {
    return this.prisma.places
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .user(args);
  }
}
