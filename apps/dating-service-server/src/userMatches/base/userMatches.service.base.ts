/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, UserMatches as PrismaUserMatches } from "@prisma/client";

export class UserMatchesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserMatchesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userMatches.count(args);
  }

  async userMatchesItems(
    args: Prisma.UserMatchesFindManyArgs
  ): Promise<PrismaUserMatches[]> {
    return this.prisma.userMatches.findMany(args);
  }
  async userMatches(
    args: Prisma.UserMatchesFindUniqueArgs
  ): Promise<PrismaUserMatches | null> {
    return this.prisma.userMatches.findUnique(args);
  }
  async createUserMatches(
    args: Prisma.UserMatchesCreateArgs
  ): Promise<PrismaUserMatches> {
    return this.prisma.userMatches.create(args);
  }
  async updateUserMatches(
    args: Prisma.UserMatchesUpdateArgs
  ): Promise<PrismaUserMatches> {
    return this.prisma.userMatches.update(args);
  }
  async deleteUserMatches(
    args: Prisma.UserMatchesDeleteArgs
  ): Promise<PrismaUserMatches> {
    return this.prisma.userMatches.delete(args);
  }
}
