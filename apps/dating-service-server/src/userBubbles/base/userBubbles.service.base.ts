/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, UserBubbles as PrismaUserBubbles } from "@prisma/client";

export class UserBubblesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserBubblesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userBubbles.count(args);
  }

  async userBubblesItems(
    args: Prisma.UserBubblesFindManyArgs
  ): Promise<PrismaUserBubbles[]> {
    return this.prisma.userBubbles.findMany(args);
  }
  async userBubbles(
    args: Prisma.UserBubblesFindUniqueArgs
  ): Promise<PrismaUserBubbles | null> {
    return this.prisma.userBubbles.findUnique(args);
  }
  async createUserBubbles(
    args: Prisma.UserBubblesCreateArgs
  ): Promise<PrismaUserBubbles> {
    return this.prisma.userBubbles.create(args);
  }
  async updateUserBubbles(
    args: Prisma.UserBubblesUpdateArgs
  ): Promise<PrismaUserBubbles> {
    return this.prisma.userBubbles.update(args);
  }
  async deleteUserBubbles(
    args: Prisma.UserBubblesDeleteArgs
  ): Promise<PrismaUserBubbles> {
    return this.prisma.userBubbles.delete(args);
  }
}
